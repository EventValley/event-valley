type EventUser {
	id: ID!
	eventId: String!
	event: Event
	userId: String!
	user: User!
	eventRoleId: String!
	eventRole: EventRole
	rsvpId: String!
	rsvp: rsvp
	createdAt: String!
	modifiedAt: String!
}

input EventUserFilter {
	eventId: IDOperators
	eventRoleId: IDOperators
	rsvpId: IDOperators
	createdAt: DateOperators
	updatedAt: DateOperators
}

input EventUserOrderBy {
	createdAt: OrderDirection
}

input EventUserOptions {
	filter: EventUserFilter
	take: Int
	skip: Int
	orderBy: EventUserOrderBy
}

extend type Query {
	eventUsers(options: EventUserOptions): [EventUser]!
}

extend type Mutation {
	subscribeToEvent(eventId: ID!): EventUser
	unsubscribeToEvent(eventId: ID!): EventUser
}
