type Event {
	id: ID!
	name: String!
	description: String!
	url: String
	streamUrl: String
	startsAt: String!
	endsAt: String!
	capacity: Int
	inviteOnly: Boolean
	canceled: Boolean
	image: String!
	groupId: String!
	group: Group!
	venueId: String
	venue: Venue
	statusId: String!
	status: EventStatus
	eventStats: [EventStats]
	createdAt: String
	modifiedAt: String
}

input EventFilter {
	id: IDOperators
	name: StringOperators
	groupId: IDOperators
	groupSlug: StringOperators
	startsAt: DateOperators
	createdAt: DateOperators
	updatedAt: DateOperators
}

input EventOrderBy {
	createdAt: OrderDirection
	startsAt: OrderDirection
}

input EventOptions {
	filter: EventFilter
	take: Int
	skip: Int
	cursor: Int
	orderBy: EventOrderBy
	personal: Boolean
}

input CreateEventInput {
	name: String!
	description: String!
	startsAt: String!
	endsAt: String!
	capacity: Int
	inviteOnly: Boolean
	image: String!
	groupId: String!
	venueId: String
	statusId: String!
}

input UpdateEventInput {
	id: ID!
	name: String
	description: String
	startsAt: String
	endsAt: String
	capacity: Int
	inviteOnly: Boolean
	image: String
	groupId: String
	venueId: String
	statusId: String
}

extend type Query {
	event(id: ID!): Event
	events(options: EventOptions): [Event]!
}

type AttendEvent {
	success: Boolean!
}
type NotAttendEvent {
	success: Boolean!
}

extend type Mutation {
	attendEvent(id: ID!): AttendEvent!
	notAttendEvent(id: ID!): NotAttendEvent!
	createEvent(input: CreateEventInput!): Event!
	updateEvent(input: UpdateEventInput!): Event!
}
